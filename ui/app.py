import streamlit as st
import joblib
import numpy as np
import pandas as pd
import datetime
from pylatex import Document, Section, Tabular, Package, Command
from pylatex.utils import bold, NoEscape

# === Load Model ===
model = joblib.load("models/final_model.pkl")

st.title("Heart Disease Prediction App ‚ù§Ô∏è")

# === Input Form ===
st.header("Patient Information")
patient_name = st.text_input("Patient Name", help="Enter the patient's full name.")
sex = st.selectbox("Sex", options=[0, 1], format_func=lambda x: "Female" if x == 0 else "Male", help="Select patient‚Äôs gender.")
cp = st.selectbox("Chest Pain Type (cp)", options=[0, 1, 2, 3], format_func=lambda x: ["Typical angina", "Atypical angina", "Non-anginal pain", "Asymptomatic"][x], help="Type of chest pain.")
thalach = st.number_input("Maximum Heart Rate (thalach)", min_value=50, max_value=250, value=180, help="Max heart rate during stress test.")
exang = st.selectbox("Exercise Induced Angina (exang)", options=[0, 1], format_func=lambda x: "No" if x == 0 else "Yes", help="Angina induced by exercise.")
oldpeak = st.number_input("ST Depression (oldpeak)", min_value=0.0, max_value=10.0, value=1.0, step=0.1)
slope = st.selectbox("Slope of ST Segment (slope)", options=[0, 1, 2], format_func=lambda x: ["Upsloping", "Flat", "Downsloping"][x], help="Slope of ST segment during exercise.")
ca = st.selectbox("Number of Major Vessels (ca)", options=[0, 1, 2, 3, 4], help="Vessels colored by fluoroscopy.")
thal = st.selectbox("Thalassemia (thal)", options=[0, 1, 2, 3], format_func=lambda x: ["Not described", "Normal", "Reversible defect", "Fixed defect"][x], help="Thalassemia condition.")

# Convert to array
input_data = np.array([[sex, cp, thalach, exang, oldpeak, slope, ca, thal]])

def generate_pdf_report(patient_name, sex, cp, thalach, exang, oldpeak, slope, ca, thal, result, probability):
    doc = Document()
    doc.packages.append(Package('geometry', options=['letterpaper', 'margin=1in']))
    doc.packages.append(Package('booktabs'))
    doc.packages.append(Package('xcolor'))
    doc.packages.append(Package('times'))
    doc.preamble.append(Command('title', 'Heart Disease Prediction Report'))
    doc.preamble.append(Command('author', 'AI-Powered Prediction System'))
    doc.preamble.append(Command('date', NoEscape(r'\today')))
    doc.append(NoEscape(r'\maketitle'))
    with doc.create(Section('Patient Details')):
        with doc.create(Tabular('|l|l|')) as table:
            table.add_hline()
            table.add_row((bold('Feature'), bold('Value')))
            table.add_hline()
            table.add_row(('Patient Name', patient_name))
            table.add_row(('Date and Time', datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
            table.add_row(('Sex', 'Female' if sex == 0 else 'Male'))
            table.add_row(('Chest Pain Type', ['Typical angina', 'Atypical angina', 'Non-anginal pain', 'Asymptomatic'][cp]))
            table.add_row(('Maximum Heart Rate', str(thalach)))
            table.add_row(('Exercise Induced Angina', 'No' if exang == 0 else 'Yes'))
            table.add_row(('ST Depression', str(oldpeak)))
            table.add_row(('Slope of ST Segment', ['Upsloping', 'Flat', 'Downsloping'][slope]))
            table.add_row(('Number of Major Vessels', str(ca)))
            table.add_row(('Thalassemia', ['Not described', 'Normal', 'Reversible defect', 'Fixed defect'][thal]))
            table.add_hline()
    with doc.create(Section('Prediction Results')):
        prediction_text = f"{bold('Prediction')}: {'Has Heart Disease' if result == 1 else 'No Heart Disease'} (Confidence: {probability:.2f})."
        doc.append(NoEscape(prediction_text))
    with doc.create(Section('Disclaimer')):
        doc.append('This report is generated by an AI model for informational purposes only. Consult a healthcare professional for medical advice.')
    filename = f"heart_report_{patient_name.replace(' ', '_')}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    doc.generate_pdf(filename, clean_tex=True)
    return filename

if st.button("Predict"):
    if not patient_name.strip():
        st.error("Please enter the patient's name.")
    else:
        prediction = model.predict(input_data)[0]
        probability = model.predict_proba(input_data)[0][1]
        result = "Patient is at risk of Heart Disease üíî" if prediction == 1 else "No Heart Disease detected ‚úÖ"
        st.subheader("Result:")
        st.write(result)
        st.write(f"Prediction Probability: {probability:.2f}")
        pdf_filename = generate_pdf_report(patient_name, sex, cp, thalach, exang, oldpeak, slope, ca, thal, prediction, probability)
        with open(pdf_filename, "rb") as f:
            st.download_button("üì• Download Report", f, file_name=pdf_filename, mime="application/pdf")
